using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using log4net;

namespace FifthAssessment
{
    public class ServerException : Exception
    {
        public ServerException(string message) : base(message) { }
    }
    public class PatientHistory
    {
        public int HistoryID { get; set; }
        public string PatientName { get; set; }
        public string Medication { get; set; }
        public int Duration { get; set; }
        public PatientHistory(int historyID, string patientName, string medication, int duration)
        {
            HistoryID = historyID;
            PatientName = patientName;
            Medication = medication;
            Duration = duration;
        }
        public override string ToString()
        {
            return $"HistoryID :{HistoryID},PatientName: {PatientName},Medication: {Medication},Duration: {Duration}";
        }
    }
    public class PatientHistoryServices
    {
        private static string connectionString = "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=FifthAssessmentdb;Integrated Security=True;";
        public static void Read(PatientHistory[] patientHistories)
        {
            //for (int i = 0; i < patientHistories.Length; i++)
            //{
            //    Console.Write("Enter the HistoryID:");
            //    int HistoryID = int.Parse(Console.ReadLine());
            //    Console.Write("Enter the PatientName:");
            //    string PatientName = Console.ReadLine();
            //    Console.Write("Enter the Medication:");
            //    string Medication = Console.ReadLine();
            //    Console.Write("Enter the Duration:");
            //    int Duration = int.Parse(Console.ReadLine());

            //    patientHistories[i] = new PatientHistory(HistoryID, PatientName, Medication, Duration);
            //}

            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    string query = "SELECT HistoryID, PatientName, Medication, Duration FROM PatientHistory";
                    SqlCommand cmd = new SqlCommand(query, conn);
                    conn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();
                    for (int i = 0; i < patientHistories.Length; i++)
                    {
                        if (!reader.Read())
                        {
                            throw new ServerException("[0101]Server Error.");//throw error
                        }
                        patientHistories[i] = new PatientHistory(
                        (int)reader["HistoryID"],
                        (string)reader["PatientName"],
                        (string)reader["Medication"],
                        (int)reader["Duration"]
                        );
                    }
                }
            }
            catch (SqlException ex)
            {
                // Handle SQL exceptions
                //Console.WriteLine($"SQL Error: {ex.Message}");
                throw new ServerException($"[0102]Server Error.{ex.Message}");//throw Error
            }
            catch (ServerException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                // Handle other exceptions
                //Console.WriteLine($"Error: {ex.Message}");
                throw new ServerException($"[0103]Server Error.{ex.Message}");//throw Error
            }
        }
        public static void Sort(PatientHistory[] patientHistories)
        {
            int n = patientHistories.Length;
            for (int i = 0; i < n - 1; i++)
            {
                int minIndex = i;
                for (int j = i + 1; j < n; j++)
                {
                    if (string.Compare(patientHistories[j].PatientName, patientHistories[minIndex].PatientName) < 0)
                    {
                        minIndex = j;
                    }
                }
                if (minIndex != i)
                {
                    PatientHistory temp = patientHistories[minIndex];
                    patientHistories[minIndex] = patientHistories[i];
                    patientHistories[i] = temp;
                }
            }
        }
        public static PatientHistory LongestDuration(PatientHistory[] patientHistories)
        {
            PatientHistory longestDuration = patientHistories[0];
            int n = patientHistories.Length;
            for (int i = 1; i < n; i++)
            {
                if (patientHistories[i].Duration > longestDuration.Duration)
                {
                    longestDuration = patientHistories[i];
                }
            }
            Console.WriteLine("Patient History with Longest Duration:");
            Console.WriteLine($"History ID: {longestDuration.HistoryID}, Patient Name: {longestDuration.PatientName}, Medication: {longestDuration.Medication}, Duration: {longestDuration.Duration}");
            return longestDuration;

        }
        public static PatientHistory SecondShortestDuration(PatientHistory[] patientHistories)
        {
            if (patientHistories.Length < 2) return null;

            PatientHistory shortestDuration = patientHistories[0];
            PatientHistory secondShortestDuration = null;

            foreach (var history in patientHistories)
            {
                if (history.Duration < shortestDuration.Duration)
                {
                    secondShortestDuration = shortestDuration;
                    shortestDuration = history;
                }
                else if (secondShortestDuration == null || history.Duration < secondShortestDuration.Duration)
                {
                    if (history.Duration != shortestDuration.Duration)
                    {
                        secondShortestDuration = history;
                    }
                }
            }

            Console.WriteLine("Patient History with Second Shortest Duration:");
            Console.WriteLine(secondShortestDuration);
            return secondShortestDuration;


        }
        public class Program
        {
            private static readonly ILog log = LogManager.GetLogger(typeof(Program));
            static void Main(string[] args)
            {
                PatientHistory[] patienthistories = new PatientHistory[3];
                try
                {
                    PatientHistoryServices.Read(patienthistories);
                }
                catch (ServerException ex)
                {
                    log.Error($"{ex.Message}");
                }
                //PatientHistoryServices.Read(patienthistories);
                //Console.WriteLine("enter the doctor id to find the minimum dosage:");
                //log.Info("enter the doctor id to find the minimum dosage:");
                //int doctorID = int.Parse(Console.ReadLine());
                PatientHistoryServices.LongestDuration(patienthistories);
                PatientHistoryServices.SecondShortestDuration(patienthistories);
                PatientHistoryServices.Sort(patienthistories);
                log.Info("sorted by patient name:");
                //Console.WriteLine("sorted by patient name:");
                foreach (PatientHistory patient in patienthistories)
                {
                    log.Info(patient);
                    //Console.WriteLine(patient);
                }
            }
        }
    }
}
-----------------------------------------------------------------------------------------------------------
TEST

using Microsoft.VisualStudio.TestTools.UnitTesting;
using FifthAssessment;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FifthAssessment.Tests
{
    [TestClass()]
    public class PatientHistoryServicesTests
    {
        [TestMethod()]
        public void SortTest()
        {
            PatientHistory[] patienthistories = new PatientHistory[3];
            PatientHistoryServices.Read(patienthistories);
            PatientHistory expected = new PatientHistory(3, "Abijith", "Halls", 30);
            PatientHistoryServices.Sort(patienthistories);
            PatientHistory actual = patienthistories[0];
            Assert.AreEqual(expected.ToString(), actual.ToString());

        }

        [TestMethod()]
        public void LongestDurationTest()
        {
            PatientHistory[] patienthistories = new PatientHistory[3];
            PatientHistoryServices.Read(patienthistories);
            PatientHistory expected = new PatientHistory(1, "Rahul", "Dolo 650", 120);
            PatientHistory actual = PatientHistoryServices.LongestDuration(patienthistories);
            Assert.AreEqual(expected.ToString(), actual.ToString());
        }

        [TestMethod()]
        public void SecondShortestDurationTest()
        {
            PatientHistory[] patienthistories = new PatientHistory[3];
            PatientHistoryServices.Read(patienthistories);
            PatientHistory expected = new PatientHistory(2, "Girish", "Vicks", 56);
            PatientHistory actual = PatientHistoryServices.SecondShortestDuration(patienthistories);
            Assert.AreEqual(expected.ToString(), actual.ToString());

        }
    }
}
-------------------------------------------------------------------------------------
SQL QUERY

CREATE DATABASE FifthAssessmentdb;
USE FifthAssessmentdb;
CREATE TABLE PatientHistory (
 HistoryID INT PRIMARY KEY,
 PatientName NVARCHAR(100),
 Medication NVARCHAR(100),
 Duration INT
);
INSERT INTO PatientHistory
(HistoryID, PatientName, Medication, Duration) VALUES
(1,'Rahul', 'Dolo 650', 120),
(2,'Girish', 'Vicks', 56),
(3, 'Abijith','Halls', 30);
SELECT * FROM PatientHistory;
--------------------------------------------------------------------------------------
